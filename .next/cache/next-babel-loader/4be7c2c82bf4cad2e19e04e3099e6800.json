{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport Cookies from 'universal-cookie';\nimport \"../core/Theme/antd.less\";\nimport \"../core/Theme/base\";\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport axios from 'axios';\nimport { Config } from \"../core/config\";\nimport { AuthProvider } from \"../core/Components/Providers/AuthProvider\";\nconst GlobalStyle = createGlobalStyle``;\nconst theme = {};\n\nclass MyApp extends App {\n  render() {\n    const {\n      Component,\n      pageProps,\n      authenticated\n    } = this.props;\n    return __jsx(\"div\", null, __jsx(GlobalStyle, null), __jsx(ThemeProvider, {\n      theme: theme\n    }, __jsx(AuthProvider, {\n      authenticated: authenticated\n    }, __jsx(Component, pageProps))));\n  }\n\n}\n\nMyApp.getInitialProps = async appContext => {\n  let authenticated = false;\n  const request = appContext.ctx.req;\n\n  if (request) {\n    const cookies = new Cookies(request.headers.cookie || '');\n    request.cookies = cookies.getAll() || {}; // Make API Call to validate Token\n\n    await axios.post(`${Config().ServiceURI}/validate`, {\n      Token: request.cookies.sesstion\n    }, {\n      headers: {\n        Authorization: `BEARER ${request.cookies.sesstion}`\n      }\n    }).then(res => res.data).catch(error => {\n      const {\n        response\n      } = error;\n      console.log(response);\n    });\n    authenticated = true;\n  } // TODO  Do the Cookie Validation here via API call\n  // Call the page's `getInitialProps` and fill `appProps.pageProps`\n\n\n  const appProps = await App.getInitialProps(appContext);\n  return _objectSpread(_objectSpread({}, appProps), {}, {\n    authenticated\n  });\n};\n\nexport default MyApp;","map":{"version":3,"sources":["/home/ubuntu/go/src/github.com/jobbox-tech/recruiter-ui/src/pages/_app.tsx"],"names":["React","App","Cookies","createGlobalStyle","ThemeProvider","axios","Config","AuthProvider","GlobalStyle","theme","MyApp","render","Component","pageProps","authenticated","props","getInitialProps","appContext","request","ctx","req","cookies","headers","cookie","getAll","post","ServiceURI","Token","sesstion","Authorization","then","res","data","catch","error","response","console","log","appProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,OAAOC,GAAP,MAAqC,UAArC;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA;AACA;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,mBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT;AAGA,SAASC,YAAT;AAEA,MAAMC,WAAW,GAAGL,iBAAkB,EAAtC;AACA,MAAMM,KAAK,GAAG,EAAd;;AAMA,MAAMC,KAAN,SAAoBT,GAApB,CAAkC;AAChCU,EAAAA,MAAM,GAAiB;AACrB,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA;AAAxB,QAA0C,KAAKC,KAArD;AACA,WACE,mBACE,MAAC,WAAD,OADF,EAEE,MAAC,aAAD;AAAe,MAAA,KAAK,EAAEN;AAAtB,OACE,MAAC,YAAD;AAAc,MAAA,aAAa,EAAEK;AAA7B,OACE,MAAC,SAAD,EAAeD,SAAf,CADF,CADF,CAFF,CADF;AAUD;;AAb+B;;AAgBlCH,KAAK,CAACM,eAAN,GAAwB,MACtBC,UADsB,IAEkB;AACxC,MAAIH,aAAa,GAAG,KAApB;AACA,QAAMI,OAAO,GAAGD,UAAU,CAACE,GAAX,CAAeC,GAA/B;;AACA,MAAIF,OAAJ,EAAa;AACX,UAAMG,OAAO,GAAG,IAAInB,OAAJ,CAAYgB,OAAO,CAACI,OAAR,CAAgBC,MAAhB,IAA0B,EAAtC,CAAhB;AACAL,IAAAA,OAAO,CAACG,OAAR,GAAkBA,OAAO,CAACG,MAAR,MAAoB,EAAtC,CAFW,CAIX;;AACA,UAAMnB,KAAK,CACRoB,IADG,CAED,GAAEnB,MAAM,GAAGoB,UAAW,WAFrB,EAGF;AACEC,MAAAA,KAAK,EAAET,OAAO,CAACG,OAAR,CAAgBO;AADzB,KAHE,EAMF;AACEN,MAAAA,OAAO,EAAE;AACPO,QAAAA,aAAa,EAAG,UAASX,OAAO,CAACG,OAAR,CAAgBO,QAAS;AAD3C;AADX,KANE,EAYHE,IAZG,CAYEC,GAAG,IAAIA,GAAG,CAACC,IAZb,EAaHC,KAbG,CAaGC,KAAK,IAAI;AACd,YAAM;AAAEC,QAAAA;AAAF,UAAeD,KAArB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,KAhBG,CAAN;AAiBArB,IAAAA,aAAa,GAAG,IAAhB;AACD,GA1BuC,CA4BxC;AAEA;;;AACA,QAAMwB,QAAQ,GAAG,MAAMrC,GAAG,CAACe,eAAJ,CAAoBC,UAApB,CAAvB;AACA,yCAAYqB,QAAZ;AAAsBxB,IAAAA;AAAtB;AACD,CAnCD;;AAqCA,eAAeJ,KAAf","sourcesContent":["import React, { ReactElement } from 'react';\nimport App, { AppInitialProps } from 'next/app';\nimport Cookies from 'universal-cookie';\nimport '@/core/Theme/antd.less';\nimport '@/core/Theme/base';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport axios from 'axios';\nimport { Config } from '@/core/config';\n\nimport { CookieMessage } from '@/core/types/index.d';\nimport { AuthProvider } from '@/core/Components/Providers/AuthProvider';\n\nconst GlobalStyle = createGlobalStyle``;\nconst theme = {};\n\ntype AppProps = {\n  authenticated: boolean;\n};\n\nclass MyApp extends App<AppProps> {\n  render(): ReactElement {\n    const { Component, pageProps, authenticated } = this.props;\n    return (\n      <div>\n        <GlobalStyle />\n        <ThemeProvider theme={theme}>\n          <AuthProvider authenticated={authenticated}>\n            <Component {...pageProps} />\n          </AuthProvider>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nMyApp.getInitialProps = async (\n  appContext,\n): Promise<AppInitialProps & AppProps> => {\n  let authenticated = false;\n  const request = appContext.ctx.req as CookieMessage;\n  if (request) {\n    const cookies = new Cookies(request.headers.cookie || '');\n    request.cookies = cookies.getAll() || {};\n\n    // Make API Call to validate Token\n    await axios\n      .post(\n        `${Config().ServiceURI}/validate`,\n        {\n          Token: request.cookies.sesstion,\n        },\n        {\n          headers: {\n            Authorization: `BEARER ${request.cookies.sesstion}`,\n          },\n        },\n      )\n      .then(res => res.data)\n      .catch(error => {\n        const { response } = error;\n        console.log(response);\n      });\n    authenticated = true;\n  }\n\n  // TODO  Do the Cookie Validation here via API call\n\n  // Call the page's `getInitialProps` and fill `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext);\n  return { ...appProps, authenticated };\n};\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}