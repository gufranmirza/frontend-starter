{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Typography from 'antd/lib/typography';\nimport Link from 'next/link';\nimport axios from 'axios';\nimport Button from '@atlaskit/button';\nimport Form, { ErrorMessage, Field, FormFooter } from '@atlaskit/form';\nimport Textfield from '@atlaskit/textfield';\nimport * as styles from \"./styles\";\nconst {\n  Title\n} = Typography;\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSubmit\", () => {\n      const {\n        name,\n        email,\n        designation,\n        company\n      } = this.state;\n      axios.post(`${Config().ServiceURI}/login`, {\n        Email: email\n      }).then(res => {\n        const {\n          status,\n          data\n        } = res;\n\n        if (data !== undefined && status === 200) {\n          successNotification(`A login link has been successfully sent on the email address ${email}. Please click on the link to proceed. `);\n          this.setState({\n            email: ''\n          });\n        } else {\n          errorNotification(data.Error);\n        }\n      }).catch(error => {\n        const {\n          response\n        } = error;\n\n        if (response !== undefined && response.data !== undefined) {\n          errorNotification(response.data.Error);\n        } else {\n          errorNotification('Something went wrong, please try again');\n        }\n      });\n    });\n\n    _defineProperty(this, \"validateCompany\", value => {\n      if (value === '') {\n        return 'INCORRECT';\n      }\n\n      this.setState({\n        company: value\n      });\n      return undefined;\n    });\n\n    _defineProperty(this, \"validateName\", value => {\n      if (value === '') {\n        return 'INCORRECT';\n      }\n\n      this.setState({\n        name: value\n      });\n      return undefined;\n    });\n\n    _defineProperty(this, \"validateEmail\", value => {\n      if (value === '') {\n        return 'INCORRECT';\n      }\n\n      this.setState({\n        email: value\n      });\n      return undefined;\n    });\n\n    _defineProperty(this, \"validateDesignation\", value => {\n      if (value === '') {\n        return 'INCORRECT';\n      }\n\n      this.setState({\n        designation: value\n      });\n      return undefined;\n    });\n\n    this.state = {\n      email: '',\n      company: '',\n      designation: '',\n      name: ''\n    };\n  }\n\n  render() {\n    const {\n      name,\n      email,\n      designation,\n      company\n    } = this.state;\n    return __jsx(styles.Root, null, __jsx(Form, {\n      onSubmit: this.handleSubmit\n    }, ({\n      formProps\n    }) => __jsx(\"form\", _extends({}, formProps, {\n      name: \"validation-example\"\n    }), __jsx(Field, {\n      label: \"Company Name\",\n      isRequired: true,\n      name: \"company-name\",\n      validate: this.validateCompany,\n      defaultValue: \"\"\n    }, ({\n      fieldProps,\n      error\n    }) => __jsx(React.Fragment, null, __jsx(Textfield, fieldProps), error === 'INCORRECT' && __jsx(ErrorMessage, null, \"Please select a company you work for\"))), __jsx(Field, {\n      label: \"Work Email\",\n      isRequired: true,\n      name: \"work-email\",\n      validate: this.validateEmail,\n      defaultValue: \"\"\n    }, ({\n      fieldProps,\n      error\n    }) => __jsx(React.Fragment, null, __jsx(Textfield, fieldProps), error === 'INCORRECT' && __jsx(ErrorMessage, null, \"Incorrect email address\"))), __jsx(Field, {\n      label: \"Your Name\",\n      isRequired: true,\n      name: \"your-name\",\n      validate: this.validateName,\n      defaultValue: \"\"\n    }, ({\n      fieldProps,\n      error\n    }) => __jsx(React.Fragment, null, __jsx(Textfield, fieldProps), error === 'INCORRECT' && __jsx(ErrorMessage, null, \"Name can not be blank\"))), __jsx(Field, {\n      label: \"Designation\",\n      isRequired: true,\n      name: \"your-designation\",\n      validate: this.validateDesignation,\n      defaultValue: \"\"\n    }, ({\n      fieldProps,\n      error\n    }) => __jsx(React.Fragment, null, __jsx(Textfield, fieldProps), error === 'INCORRECT' && __jsx(ErrorMessage, null, \"Designation can not be blank\"))), __jsx(FormFooter, null, __jsx(Button, {\n      style: {\n        height: '40px'\n      },\n      shouldFitContainer: true,\n      type: \"submit\",\n      appearance: \"primary\"\n    }, \"Sign Up & Post A Job\")))), __jsx(Title, {\n      level: 5,\n      style: {\n        marginTop: '20px',\n        fontWeight: 500,\n        textAlign: 'center'\n      }\n    }, \"Already have an account?\", ' ', __jsx(Link, {\n      href: \"/login\"\n    }, __jsx(\"a\", {\n      href: \"/login\"\n    }, \"Log in\"))));\n  }\n\n}","map":{"version":3,"sources":["/home/ubuntu/go/src/github.com/jobbox-tech/recruiter-ui/src/Containers/Signup/Form/index.tsx"],"names":["React","Component","Typography","Link","axios","Button","Form","ErrorMessage","Field","FormFooter","Textfield","styles","Title","constructor","props","name","email","designation","company","state","post","Config","ServiceURI","Email","then","res","status","data","undefined","successNotification","setState","errorNotification","Error","catch","error","response","value","render","handleSubmit","formProps","validateCompany","fieldProps","validateEmail","validateName","validateDesignation","height","marginTop","fontWeight","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Typography from 'antd/lib/typography';\nimport Link from 'next/link';\nimport axios from 'axios';\n\nimport Button from '@atlaskit/button';\nimport Form, { ErrorMessage, Field, FormFooter } from '@atlaskit/form';\n\nimport Textfield from '@atlaskit/textfield';\nimport * as styles from './styles';\n\nconst { Title } = Typography;\n\ntype Props = {};\n\ntype State = {\n  name: string;\n  email: string;\n  company: string;\n  designation: string;\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default class extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      company: '',\n      designation: '',\n      name: '',\n    };\n  }\n\n  handleSubmit = (): void => {\n    const { name, email, designation, company } = this.state;\n\n    axios\n      .post(`${Config().ServiceURI}/login`, {\n        Email: email,\n      })\n      .then(res => {\n        const { status, data } = res;\n        if (data !== undefined && status === 200) {\n          successNotification(\n            `A login link has been successfully sent on the email address ${email}. Please click on the link to proceed. `,\n          );\n          this.setState({ email: '' });\n        } else {\n          errorNotification(data.Error);\n        }\n      })\n      .catch(error => {\n        const { response } = error;\n        if (response !== undefined && response.data !== undefined) {\n          errorNotification(response.data.Error);\n        } else {\n          errorNotification('Something went wrong, please try again');\n        }\n      });\n  };\n\n  validateCompany = (value: string): string => {\n    if (value === '') {\n      return 'INCORRECT';\n    }\n    this.setState({ company: value });\n    return undefined;\n  };\n\n  validateName = (value: string): string => {\n    if (value === '') {\n      return 'INCORRECT';\n    }\n    this.setState({ name: value });\n    return undefined;\n  };\n\n  validateEmail = (value: string): string => {\n    if (value === '') {\n      return 'INCORRECT';\n    }\n    this.setState({ email: value });\n    return undefined;\n  };\n\n  validateDesignation = (value: string): string => {\n    if (value === '') {\n      return 'INCORRECT';\n    }\n    this.setState({ designation: value });\n    return undefined;\n  };\n\n  render(): any {\n    const { name, email, designation, company } = this.state;\n    return (\n      <styles.Root>\n        <Form onSubmit={this.handleSubmit}>\n          {({ formProps }) => (\n            <form {...formProps} name=\"validation-example\">\n              <Field\n                label=\"Company Name\"\n                isRequired\n                name=\"company-name\"\n                validate={this.validateCompany}\n                defaultValue=\"\"\n              >\n                {({ fieldProps, error }: any) => (\n                  <>\n                    <Textfield {...fieldProps} />\n                    {error === 'INCORRECT' && (\n                      <ErrorMessage>\n                        Please select a company you work for\n                      </ErrorMessage>\n                    )}\n                  </>\n                )}\n              </Field>\n              <Field\n                label=\"Work Email\"\n                isRequired\n                name=\"work-email\"\n                validate={this.validateEmail}\n                defaultValue=\"\"\n              >\n                {({ fieldProps, error }: any) => (\n                  <>\n                    <Textfield {...fieldProps} />\n                    {error === 'INCORRECT' && (\n                      <ErrorMessage>Incorrect email address</ErrorMessage>\n                    )}\n                  </>\n                )}\n              </Field>\n              <Field\n                label=\"Your Name\"\n                isRequired\n                name=\"your-name\"\n                validate={this.validateName}\n                defaultValue=\"\"\n              >\n                {({ fieldProps, error }: any) => (\n                  <>\n                    <Textfield {...fieldProps} />\n                    {error === 'INCORRECT' && (\n                      <ErrorMessage>Name can not be blank</ErrorMessage>\n                    )}\n                  </>\n                )}\n              </Field>\n              <Field\n                label=\"Designation\"\n                isRequired\n                name=\"your-designation\"\n                validate={this.validateDesignation}\n                defaultValue=\"\"\n              >\n                {({ fieldProps, error }: any) => (\n                  <>\n                    <Textfield {...fieldProps} />\n                    {error === 'INCORRECT' && (\n                      <ErrorMessage>Designation can not be blank</ErrorMessage>\n                    )}\n                  </>\n                )}\n              </Field>\n              <FormFooter>\n                <Button\n                  style={{ height: '40px' }}\n                  shouldFitContainer\n                  type=\"submit\"\n                  appearance=\"primary\"\n                >\n                  Sign Up & Post A Job\n                </Button>\n              </FormFooter>\n            </form>\n          )}\n        </Form>\n        <Title\n          level={5}\n          style={{\n            marginTop: '20px',\n            fontWeight: 500,\n            textAlign: 'center',\n          }}\n        >\n          Already have an account?{' '}\n          <Link href=\"/login\">\n            <a href=\"/login\">Log in</a>\n          </Link>\n        </Title>\n      </styles.Root>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}