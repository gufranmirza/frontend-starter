{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\n\nfunction isBrowser() {\n  return false;\n}\n/**\n * Support conditional redirecting, both server-side and client-side.\n *\n * Client-side, we can use next/router. But that doesn't exist on the server.\n * So on the server we must do an HTTP redirect. This component handles\n * the logic to detect whether on the server and client and redirect\n * appropriately.\n *\n * @param WrappedComponent The component that this functionality\n * will be added to.\n * @param clientCondition A function that returns a boolean representing\n * whether to perform the redirect. It will always be called, even on\n * the server. This is necessary so that it can have hooks in it (since\n * can't be inside conditionals and must always be called).\n * @param serverCondition A function that returns a boolean representing\n * whether to perform the redirect. It is only called on the server. It\n * accepts a Next page context as a parameter so that the request can\n * be examined and the response can be changed.\n * @param location The location to redirect to.\n */\n\n\nexport default function withConditionalRedirect({\n  WrappedComponent,\n  clientCondition,\n  serverCondition,\n  location\n}) {\n  const WithConditionalRedirectWrapper = props => {\n    const router = useRouter();\n    const redirectCondition = clientCondition();\n\n    if (isBrowser() && redirectCondition) {\n      router.push(location);\n      return __jsx(React.Fragment, null);\n    }\n\n    return __jsx(WrappedComponent, props);\n  };\n\n  WithConditionalRedirectWrapper.getInitialProps = async ctx => {\n    if (!isBrowser() && ctx.res) {\n      if (serverCondition(ctx)) {\n        ctx.res.writeHead(302, {\n          Location: location\n        });\n        ctx.res.end();\n      }\n    }\n\n    const componentProps = // eslint-disable-line\n    WrappedComponent.getInitialProps && ( // eslint-disable-line\n    await WrappedComponent.getInitialProps(ctx)); // eslint-disable-line\n\n    return _objectSpread({}, componentProps);\n  };\n\n  return WithConditionalRedirectWrapper;\n}","map":null,"metadata":{},"sourceType":"module"}