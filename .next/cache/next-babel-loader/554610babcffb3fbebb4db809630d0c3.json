{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nconst AuthContext = React.createContext({\n  isAuthenticated: false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setAuthenticated: () => {}\n});\n/**\n * The initial value of `isAuthenticated` comes from the `authenticated`\n * prop which gets set by _app. We store that value in state and ignore\n * the prop from then on. The value can be changed by calling the\n * `setAuthenticated()` method in the context.\n */\n\nexport const AuthProvider = ({\n  children,\n  authenticated\n}) => {\n  const [isAuthenticated, setAuthenticated] = React.useState(authenticated);\n  return __jsx(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      setAuthenticated\n    }\n  }, children);\n};\nexport function Authenticate() {\n  const context = React.useContext(AuthContext);\n\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n}\nexport function useIsAuthenticated() {\n  const context = useAuth();\n  return context.isAuthenticated;\n}","map":{"version":3,"sources":["/home/ubuntu/go/src/github.com/jobbox-tech/recruiter-ui/src/core/Components/Providers/AuthProvider.tsx"],"names":["React","AuthContext","createContext","isAuthenticated","setAuthenticated","AuthProvider","children","authenticated","useState","Authenticate","context","useContext","undefined","Error","useIsAuthenticated","useAuth"],"mappings":";AAAA,OAAOA,KAAP,MAA+C,OAA/C;AAOA,MAAMC,WAAW,GAAGD,KAAK,CAACE,aAAN,CAAiC;AACnDC,EAAAA,eAAe,EAAE,KADkC;AAEnD;AACAC,EAAAA,gBAAgB,EAAE,MAAM,CAAE;AAHyB,CAAjC,CAApB;AAMA;;;;;;;AAMA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAC3BC,EAAAA,QAD2B;AAE3BC,EAAAA;AAF2B,CAAD,KAMR;AAClB,QAAM,CAACJ,eAAD,EAAkBC,gBAAlB,IAAsCJ,KAAK,CAACQ,QAAN,CAC1CD,aAD0C,CAA5C;AAGA,SACE,MAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,eADK;AAELC,MAAAA;AAFK;AADT,KAMGE,QANH,CADF;AAUD,CApBM;AAsBP,OAAO,SAASG,YAAT,GAAqC;AAC1C,QAAMC,OAAO,GAAGV,KAAK,CAACW,UAAN,CAAiBV,WAAjB,CAAhB;;AACA,MAAIS,OAAO,KAAKE,SAAhB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,SAAOH,OAAP;AACD;AAED,OAAO,SAASI,kBAAT,GAAuC;AAC5C,QAAMJ,OAAO,GAAGK,OAAO,EAAvB;AACA,SAAOL,OAAO,CAACP,eAAf;AACD","sourcesContent":["import React, { ReactNode, ReactElement } from 'react';\n\ntype AuthContext = {\n  isAuthenticated: boolean;\n  setAuthenticated: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst AuthContext = React.createContext<AuthContext>({\n  isAuthenticated: false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setAuthenticated: () => {},\n});\n\n/**\n * The initial value of `isAuthenticated` comes from the `authenticated`\n * prop which gets set by _app. We store that value in state and ignore\n * the prop from then on. The value can be changed by calling the\n * `setAuthenticated()` method in the context.\n */\nexport const AuthProvider = ({\n  children,\n  authenticated,\n}: {\n  children: ReactNode;\n  authenticated: boolean;\n}): ReactElement => {\n  const [isAuthenticated, setAuthenticated] = React.useState<boolean>(\n    authenticated,\n  );\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated,\n        setAuthenticated,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport function Authenticate(): AuthContext {\n  const context = React.useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function useIsAuthenticated(): boolean {\n  const context = useAuth();\n  return context.isAuthenticated;\n}\n"]},"metadata":{},"sourceType":"module"}