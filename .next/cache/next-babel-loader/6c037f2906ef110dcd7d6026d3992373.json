{"ast":null,"code":"/* eslint-disable */\n\n/**\n * Unified Configuration Reader\n *\n * This helper function allows you to use the same API in accessing configuration\n * values no matter where the code is being executed (i.e. browser/node).\n *\n * e.g.\n *   import config from '../config';\n *   config('welcomeMessage'); // => \"Hello World!\"\n */\n// PRIVATES\nlet configCache;\n/**\n * This resolves the correct configuration source based on the execution\n * environment.  For node we use the standard config file, however, for browsers\n * we need to access the configuration object that would have been bound to\n * the \"window\" by our \"reactApplication\" middleware.\n *\n * @return {Object} The executing environment configuration object.\n */\n\nfunction resolveConfigForBrowserOrServer() {\n  if (configCache) {\n    return configCache;\n  } // NOTE: By using the \"process.env.BUILD_FLAG_IS_NODE\" flag here this block of code\n  // will be removed when \"process.env.BUILD_FLAG_IS_NODE === true\".\n  // If no \"BUILD_FLAG_IS_NODE\" env var is undefined we can assume that we are running outside\n  // of a webpack run, and will therefore return the config file.\n\n\n  if (typeof process.env.BUILD_FLAG_IS_NODE === 'undefined' || process.env.BUILD_FLAG_IS_NODE === 'true') {\n    // i.e. running in our server/node process.\n    configCache = require(\"./values\").default; // eslint-disable-line global-require\n\n    return configCache;\n  } // To get here we are likely running in the browser.\n\n\n  if (false && typeof window.__CLIENT_CONFIG__ === 'object') {\n    // eslint-disable-line\n    configCache = window.__CLIENT_CONFIG__; // eslint-disable-line\n  } else {\n    // To get here we must be running in the browser.\n    console.warn('No client configuration object was bound to the window.'); // eslint-disable-line no-console\n\n    configCache = {};\n  }\n\n  return configCache;\n} // EXPORT\n\n/**\n * This function wraps up the boilerplate needed to access the correct\n * configuration depending on whether your code will get executed in the\n * browser/node.\n *\n * i.e.\n *  - For the browser the config values are available at window.__CLIENT_CONFIG__\n *  - For a node process they are within the \"<root>/config\".\n *\n * To request a configuration value you must provide the repective path. For\n * example, f you had the following configuration structure:\n *   {\n *     foo: {\n *       bar: [1, 2, 3]\n *     },\n *     bob: 'bob'\n *   }\n *\n * You could use this function to access \"bar\" like so:\n *   import config from '../config';\n *   const value = config('foo.bar');\n *\n * And you could access \"bob\" like so:\n *   import config from '../config';\n *   const value = config('bob');\n *\n * If any part of the path isn't available as a configuration key/value then\n * an error will be thrown indicating that a respective configuration value\n * could not be found at the given path.\n */\n\n\nfunction Get(path) {\n  const parts = typeof path === 'string' ? path.split('.') : path;\n\n  if (parts.length === 0) {\n    throw new Error('You must provide the path to the configuration value you would like to consume.');\n  }\n\n  let result = resolveConfigForBrowserOrServer();\n\n  for (let i = 0; i < parts.length; i += 1) {\n    if (result === undefined) {\n      const errorMessage = `Failed to resolve configuration value at \"${parts.join('.')}\".`; // This \"if\" block gets stripped away by webpack for production builds.\n\n      if (process.env.BUILD_FLAG_IS_DEV === 'true' && process.env.BUILD_FLAG_IS_CLIENT === 'true') {\n        throw new Error(`${errorMessage} We have noticed that you are trying to access this configuration value from the client bundle (i.e. code that will be executed in a browser). For configuration values to be exposed to the client bundle you must ensure that the path is added to the client configuration filter in the project configuration values file.`);\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    result = result[parts[i]];\n  }\n\n  return result;\n}\n\nexport default Get;","map":null,"metadata":{},"sourceType":"module"}