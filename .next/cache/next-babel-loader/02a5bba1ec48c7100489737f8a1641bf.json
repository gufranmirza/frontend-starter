{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\n\nfunction isBrowser() {\n  return true;\n}\n/**\n * Support conditional redirecting, both server-side and client-side.\n *\n * Client-side, we can use next/router. But that doesn't exist on the server.\n * So on the server we must do an HTTP redirect. This component handles\n * the logic to detect whether on the server and client and redirect\n * appropriately.\n *\n * @param WrappedComponent The component that this functionality\n * will be added to.\n * @param clientCondition A function that returns a boolean representing\n * whether to perform the redirect. It will always be called, even on\n * the server. This is necessary so that it can have hooks in it (since\n * can't be inside conditionals and must always be called).\n * @param serverCondition A function that returns a boolean representing\n * whether to perform the redirect. It is only called on the server. It\n * accepts a Next page context as a parameter so that the request can\n * be examined and the response can be changed.\n * @param location The location to redirect to.\n */\n\n\nexport default function withConditionalRedirect(_ref) {\n  var _s = $RefreshSig$();\n\n  var WrappedComponent = _ref.WrappedComponent,\n      clientCondition = _ref.clientCondition,\n      serverCondition = _ref.serverCondition,\n      location = _ref.location;\n\n  var WithConditionalRedirectWrapper = function WithConditionalRedirectWrapper(props) {\n    _s();\n\n    var router = useRouter();\n    var redirectCondition = clientCondition();\n\n    if (isBrowser() && redirectCondition) {\n      router.push(location);\n      return __jsx(React.Fragment, null);\n    }\n\n    return __jsx(WrappedComponent, props);\n  };\n\n  _s(WithConditionalRedirectWrapper, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n    return [useRouter];\n  });\n\n  WithConditionalRedirectWrapper.getInitialProps = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n      var componentProps;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!isBrowser() && ctx.res) {\n                if (serverCondition(ctx)) {\n                  ctx.res.writeHead(302, {\n                    Location: location\n                  });\n                  ctx.res.end();\n                }\n              } // eslint-disable-next-line\n\n\n              _context.t0 = WrappedComponent.getInitialProps;\n\n              if (!_context.t0) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return WrappedComponent.getInitialProps(ctx);\n\n            case 5:\n              _context.t0 = _context.sent;\n\n            case 6:\n              componentProps = _context.t0;\n              return _context.abrupt(\"return\", _objectSpread({}, componentProps));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return WithConditionalRedirectWrapper;\n}","map":{"version":3,"sources":["/home/ubuntu/go/src/github.com/jobbox-tech/recruiter-ui/src/core/Components/HOCS/withConditionalRedirect.tsx"],"names":["React","useRouter","isBrowser","withConditionalRedirect","WrappedComponent","clientCondition","serverCondition","location","WithConditionalRedirectWrapper","props","router","redirectCondition","push","getInitialProps","ctx","res","writeHead","Location","end","componentProps"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAIA,SAASC,SAAT,GAA8B;AAC5B;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,eAAe,SAASC,uBAAT,OAUM;AAAA;;AAAA,MATnBC,gBASmB,QATnBA,gBASmB;AAAA,MARnBC,eAQmB,QARnBA,eAQmB;AAAA,MAPnBC,eAOmB,QAPnBA,eAOmB;AAAA,MANnBC,QAMmB,QANnBA,QAMmB;;AACnB,MAAMC,8BAAgD,GAAG,SAAnDA,8BAAmD,CAAAC,KAAK,EAAI;AAAA;;AAChE,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAMU,iBAAiB,GAAGN,eAAe,EAAzC;;AACA,QAAIH,SAAS,MAAMS,iBAAnB,EAAsC;AACpCD,MAAAA,MAAM,CAACE,IAAP,CAAYL,QAAZ;AACA,aAAO,2BAAP;AACD;;AACD,WAAO,MAAC,gBAAD,EAAsBE,KAAtB,CAAP;AACD,GARD;;AADmB,KACbD,8BADa;AAAA,YAEFP,SAFE;AAAA;;AAWnBO,EAAAA,8BAA8B,CAACK,eAA/B;AAAA,yEAAiD,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/C,kBAAI,CAACZ,SAAS,EAAV,IAAgBY,GAAG,CAACC,GAAxB,EAA6B;AAC3B,oBAAIT,eAAe,CAACQ,GAAD,CAAnB,EAAgD;AAC9CA,kBAAAA,GAAG,CAACC,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AAAEC,oBAAAA,QAAQ,EAAEV;AAAZ,mBAAvB;AACAO,kBAAAA,GAAG,CAACC,GAAJ,CAAQG,GAAR;AACD;AACF,eAN8C,CAQ/C;;;AAR+C,4BAU7Cd,gBAAgB,CAACS,eAV4B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAWnCT,gBAAgB,CAACS,eAAjB,CAAiCC,GAAjC,CAXmC;;AAAA;AAAA;;AAAA;AASzCK,cAAAA,cATyC;AAAA,iEAalCA,cAbkC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjD;;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAOX,8BAAP;AACD","sourcesContent":["import React from 'react';\nimport { useRouter } from 'next/router';\nimport { NextPage } from 'next';\nimport { CookiesPageContext } from '@/core/types/index.d';\n\nfunction isBrowser(): boolean {\n  return typeof window !== 'undefined';\n}\n\n/**\n * Support conditional redirecting, both server-side and client-side.\n *\n * Client-side, we can use next/router. But that doesn't exist on the server.\n * So on the server we must do an HTTP redirect. This component handles\n * the logic to detect whether on the server and client and redirect\n * appropriately.\n *\n * @param WrappedComponent The component that this functionality\n * will be added to.\n * @param clientCondition A function that returns a boolean representing\n * whether to perform the redirect. It will always be called, even on\n * the server. This is necessary so that it can have hooks in it (since\n * can't be inside conditionals and must always be called).\n * @param serverCondition A function that returns a boolean representing\n * whether to perform the redirect. It is only called on the server. It\n * accepts a Next page context as a parameter so that the request can\n * be examined and the response can be changed.\n * @param location The location to redirect to.\n */\nexport default function withConditionalRedirect<CP = {}, IP = CP>({\n  WrappedComponent,\n  clientCondition,\n  serverCondition,\n  location,\n}: {\n  WrappedComponent: NextPage<CP, IP>;\n  clientCondition(): boolean;\n  serverCondition(ctx: CookiesPageContext): boolean;\n  location: string;\n}): NextPage<CP, IP> {\n  const WithConditionalRedirectWrapper: NextPage<CP, IP> = props => {\n    const router = useRouter();\n    const redirectCondition = clientCondition();\n    if (isBrowser() && redirectCondition) {\n      router.push(location);\n      return <></>;\n    }\n    return <WrappedComponent {...props} />;\n  };\n\n  WithConditionalRedirectWrapper.getInitialProps = async (ctx): Promise<IP> => {\n    if (!isBrowser() && ctx.res) {\n      if (serverCondition(ctx as CookiesPageContext)) {\n        ctx.res.writeHead(302, { Location: location });\n        ctx.res.end();\n      }\n    }\n\n    // eslint-disable-next-line\n    const componentProps =\n      WrappedComponent.getInitialProps\n      && (await WrappedComponent.getInitialProps(ctx));\n\n    return { ...(componentProps as IP) };\n  };\n\n  return WithConditionalRedirectWrapper;\n}\n"]},"metadata":{},"sourceType":"module"}