{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nvar AuthContext = React.createContext({\n  isAuthenticated: false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setAuthenticated: function setAuthenticated() {}\n});\n/**\n * The initial value of `isAuthenticated` comes from the `authenticated`\n * prop which gets set by _app. We store that value in state and ignore\n * the prop from then on. The value can be changed by calling the\n * `setAuthenticated()` method in the context.\n */\n\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children,\n      authenticated = _ref.authenticated;\n\n  var _React$useState = React.useState(authenticated),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isAuthenticated = _React$useState2[0],\n      setAuthenticated = _React$useState2[1];\n\n  return __jsx(AuthContext.Provider, {\n    value: {\n      isAuthenticated: isAuthenticated,\n      setAuthenticated: setAuthenticated\n    }\n  }, children);\n};\nexport function useAuth() {\n  var context = React.useContext(AuthContext);\n\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n}\nexport function useIsAuthenticated() {\n  var context = useAuth();\n  return context.isAuthenticated;\n}","map":null,"metadata":{},"sourceType":"module"}