{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport Cookies from 'universal-cookie';\nimport \"../core/Theme/antd.less\";\nimport \"../core/Theme/base\";\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport axios from 'axios';\nimport { Config } from \"../core/config\";\nimport { AuthProvider } from \"../core/Components/Providers/AuthProvider\";\nconst GlobalStyle = createGlobalStyle``;\nconst theme = {};\n\nclass MyApp extends App {\n  render() {\n    const {\n      Component,\n      pageProps,\n      authenticated\n    } = this.props;\n    return __jsx(\"div\", null, __jsx(GlobalStyle, null), __jsx(ThemeProvider, {\n      theme: theme\n    }, __jsx(AuthProvider, {\n      authenticated: authenticated\n    }, __jsx(Component, pageProps))));\n  }\n\n}\n\nMyApp.getInitialProps = async appContext => {\n  let authenticated = false;\n  const request = appContext.ctx.req;\n\n  if (request) {\n    const cookies = new Cookies(request.headers.cookie || '');\n    request.cookies = cookies.getAll() || {}; // Make API Call to validate Token\n\n    await axios.post(`${Config().ServiceURI}/validate`, {\n      Token: request.cookies.session\n    }, {\n      headers: {\n        Authorization: `BEARER ${request.cookies.session}`\n      }\n    }).then(res => {\n      const {\n        status\n      } = res;\n\n      if (status === 200) {\n        authenticated = true;\n      }\n    }).catch(err => {\n      const {\n        response\n      } = err;\n      authenticated = false;\n\n      if (response !== undefined && response.status === 401) {\n        cookies.remove('session', {\n          path: '/'\n        });\n        request.cookies.session = undefined;\n      }\n    });\n  } // Call the page's `getInitialProps` and fill `appProps.pageProps`\n\n\n  const appProps = await App.getInitialProps(appContext);\n  return _objectSpread(_objectSpread({}, appProps), {}, {\n    authenticated\n  });\n};\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}